Aqui está o texto melhorado e formatado em Markdown:

---

# Conectando o Front ao Back

## 1. Instalando as dependências

Volte para o código no seu IDE e abra o projeto `frontend`. No terminal, instale o `react-router-dom`:

```bash
npm install react-router-dom
```

## 2. Configurando as rotas no `index.js`

Abra o arquivo `index.js` e adicione o seguinte import:

```javascript
import { BrowserRouter, Routes, Route } from 'react-router-dom';
```

### O que são esses componentes?

- **BrowserRouter**: Componente que fornece o contexto de roteamento para sua aplicação, utilizando a API de histórico do navegador. Ele deve envolver toda a aplicação para garantir que as rotas funcionem corretamente.
- **Routes**: Componente responsável por renderizar o componente correto com base na URL atual. Dentro dele, você define as diferentes rotas utilizando o componente `Route`.
- **Route**: Componente que define uma rota individual, com dois principais atributos:
  - `path`: Define o caminho da URL que corresponde a essa rota.
  - `element`: Define o componente React que será renderizado quando a rota for acessada.

No mesmo arquivo `index.js`, adicione a configuração das rotas:

```javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { createGlobalStyle } from 'styled-components';
import { BrowserRouter, Routes, Route } from 'react-router-dom';

const GlobalStyle = createGlobalStyle`
// código omitido
`;

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <GlobalStyle />
    <BrowserRouter>
      <Routes>
        <Route path="/favoritos" element={<p>Oi!</p>} />
        <Route path="/" element={<App />} />
      </Routes>
    </BrowserRouter>
  </React.StrictMode>
);
```

No terminal, execute:

```bash
npm start
```

Agora, teste a rota:

```
http://localhost:3000/favoritos
```

## 3. Criando as rotas para a aplicação

### 3.1 Adicionando links ao cabeçalho

No arquivo `OptionsHeader/index.js`, importe o `Link` de `react-router-dom` e envolva o conteúdo com a tag `Link` para criar a navegação:

```javascript
import styled from 'styled-components';
import { Link } from 'react-router-dom';

const Options = styled.ul`
// código omitido
`;
const Option = styled.li`
// código omitido

const optionTexts = ['CATEGORIES', 'FAVORITES', 'MY SHELF'];

function OptionsHeader() {
  return (
    <Options>
      {optionTexts.map((text) => (
        <Link to={`/${text.toLowerCase()}`}>
          <Option>
            <p>{text}</p>
          </Option>
        </Link>
      ))}
    </Options>
  );
}

export default OptionsHeader;
```

### 3.2 Ajustando as rotas no `index.js`

Voltando ao `index.js`, altere o código para usar as rotas corretamente:

```javascript
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Header from './components/Header';
import Home from './routes/Home';
import Favorites from './routes/Favorites';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <GlobalStyle />
    <BrowserRouter>
      <Header />
      <Routes>
        <Route path="/favoritos" element={<Favorites />} />
        <Route path="/" element={<Home />} />
      </Routes>
    </BrowserRouter>
  </React.StrictMode>
);
```

## 4. Criando uma página de Favoritos

O cabeçalho deve ser mantido em todas as páginas para permitir a navegação. Então, no arquivo `App.js`, remova o cabeçalho e ajuste para que ele seja importado do `index.js`:

```javascript
// App.js
function App() {
  return (
    <AppContainer>
      <Search />
      <LatestReleases />
    </AppContainer>
  );
}
```

No arquivo `index.js`, adicione o cabeçalho dentro do `BrowserRouter`:

```javascript
import Header from './components/Header';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <GlobalStyle />
    <BrowserRouter>
      <Header />
      <Routes>
        <Route path="/favoritos" element={<p>Oi!</p>} />
        <Route path="/" element={<Home />} />
      </Routes>
    </BrowserRouter>
  </React.StrictMode>
);
```

Agora, teste novamente a navegação.

## 5. Link no Logo

No arquivo `Header/index.js`, adicione um `Link` ao redor do logo:

```javascript
import { Link } from 'react-router-dom';

function Header() {
  return (
    <HeaderContainer>
      <Link to="/">
        <Logo />
      </Link>
      <OptionsHeader />
      <HeaderIcons />
    </HeaderContainer>
  );
}
```

Teste para garantir que o logo funciona como um link para a página inicial.

## 6. Renomeando o `App.js` para `Home.js`

Renomeie `App.js` para `Home.js` e altere a função dentro do arquivo:

```javascript
// Home.js
function Home() {
  return (
    <AppContainer>
      <Search />
    </AppContainer>
  );
}
```

No `index.js`, altere para importar `Home`:

```javascript
import Home from './routes/Home';
```

E altere a rota:

```javascript
<Route path="/" element={<Home />} />
```

Agora, renomeie `App.js` para `Home.js`.

## 7. Organizando as rotas

Crie uma pasta chamada `routes` e mova o arquivo `Home.js` para dentro dessa pasta. Duplique o arquivo `Home.js` e renomeie para `Favorites.js`.

No arquivo `Favorites.js`, importe o componente `LatestReleases`:

```javascript
import LatestReleases from '../components/LatestReleases';
```

Renomeie a função `Home` para `Favorites`:

```javascript
// Favorites.js
function Favorites() {
  return (
    <AppContainer>
      <Search />
    </AppContainer>
  );
}
```

No arquivo `index.js`, altere a rota para usar `Favorites`:

```javascript
<Route path="/favoritos" element={<Favorites />} />
```

## 8. Configurando Axios para requisições HTTP

Instale o Axios para fazer requisições HTTP:

```bash
npm install axios
```

Crie uma nova pasta `services` e dentro dela crie o arquivo `books.js`:

```javascript
import axios from "axios";

const booksAPI = axios.create({ baseURL: "http://localhost:8000/livros" });

async function getBooks() {
  const response = await booksAPI.get('/');
  return response.data;
}

export { getBooks };
```

No arquivo `Search/index.js`, modifique para fazer requisição à API utilizando Axios:

```javascript
import { useEffect, useState } from "react";
import { getBooks } from '../../services/books.js';

function Search() {
  const [books, setBooks] = useState([]);

  useEffect(() => {
    const fetchBooks = async () => {
      const booksFromAPI = await getBooks();
      setBooks(booksFromAPI);
    };
    fetchBooks();
  }, []);

  // Código omitido...
}
```

## 9. Resolvendo problemas de CORS

Se ao tentar fazer requisições ao backend você enfrentar problemas de CORS, instale a biblioteca `cors` no backend:

```bash
npm install cors
```

Em `app.js`, configure o CORS para permitir requisições do frontend:

```javascript
import cors from 'cors';

const app = express();
app.use(cors({ origin: '*' }));
```

## 10. Finalizando o fluxo de favoritos

Agora que conseguimos integrar o front com a API, crie o arquivo `favoritosServices.js` no backend para gerenciar a lista de favoritos:

```javascript
import fs from 'fs';

function getAllFavorites() {
  return JSON.parse(fs.readFileSync('favoritos.json'));
}

function deleteFavoriteById(id) {
  const books = JSON.parse(fs.readFileSync('favoritos.json'));
  const filteredBooks = books.filter(book => book.id !== id);
  fs.writeFileSync('favoritos.json', JSON.stringify(filteredBooks));
}

function insertFavorite(id) {
  const books = JSON.parse(fs.readFileSync('livros.json'));
  const favorites = JSON.parse(fs.readFileSync('favoritos.json'));
  const bookToInsert = books.find(book => book.id === id);
  const updatedFavorites = [...favorites, bookToInsert];
  fs.writeFileSync('favoritos.json', JSON.stringify(updatedFavorites));
}

export { getAllFavorites, deleteFavoriteById, insertFavorite };
```

---

Este foi o markdown melhorado com explicações claras sobre cada passo. Se precisar de mais ajustes, me avise!
